---
title: Aula de laboratório - Modelos de Equações Simultâneas
author: Rafael Bressan
date: "2024-09-16"
format: 
  html:
    theme: cosmo
    embed-resources: true
lang: "pt-BR"
engine: jupyter
jupyter: python3
---

## Introdução

Vamos utilizar a seguinte notação geral para um SEM (Simultaneous Equations 
Model) composto de $q$ variáveis endógenas $y_1, \ldots, y_q$ e $k$ variáveis 
exógenas $x_1, \ldots, x_k$. 

$$
\begin{align*}
y_1&=\alpha_{12}y_2+\ldots +\alpha_{1q}y_q + \beta_{10}+\beta_{11}x_1+\ldots+\beta_{1k}x_k+u_1\\
y_2&=\alpha_{21}y_1+\ldots +\alpha_{2q}y_q + \beta_{20}+\beta_{21}x_1+\ldots+\beta_{2k}x_k+u_2\\
\vdots & \\
y_q&=\alpha_{q1}y_1+\ldots +\alpha_{qq-1}y_{q-1} + \beta_{q0}+\beta_{q1}x_1+\ldots+\beta_{qk}x_k+u_q
\end{align*}
$$

A condição de ordem para identificação de alguma destas equações é tal que o
número de variáveis exógenas (ou predeterminadas) excluídas da equação não 
deve ser menor que o número de variáveis endógenas incluídas nessa equação 
menos 1, $K – k \geq m – 1$.

Conseguida a identificação da equação, os regressores exógenos excluídos servirão de
variáveis instrumentais na estimação através de MQ2E.

## Oferta de Trabalho de Mulheres Casadas Trabalhando

Vimos em aula como estimar esta equação de oferta separadamente usando MQ2E.

$$
\begin{align*}
hours&=\alpha_1 lwage + \beta_{10}+ \beta_{11}educ+\beta_{12}age+\beta_{13}kidslt6+\beta_{14}nwifeinc+u_1\\
lwage&=\alpha_2 hours + \beta_{20}+ \beta_{21}educ+ \beta_{22}exper+\beta_{23}exper^2+ u_2 
\end{align*}
$$

- **Qual ou quais destas equações são identificadas?**

Vamos então estimar as duas equações de forma conjunta, ambas através de MQ2E utilizando o pacote `linearmodels`.


```{python}
import wooldridge as woo
import numpy as np
import pandas as pd
import linearmodels.iv as iv

mroz = woo.dataWoo("mroz")
# restrict to non-missing wage observations:
mroz = mroz.dropna(subset=["lwage"])
# 2SLS regressions:
reg_iv1 = iv.IV2SLS.from_formula(
    "hours ~ 1 + educ + age + kidslt6 + nwifeinc + [np.log(wage) ~ exper + I(exper**2)]",
    data=mroz,
)
results_iv1 = reg_iv1.fit(cov_type="unadjusted", debiased=True)
reg_iv2 = iv.IV2SLS.from_formula(
    "np.log(wage) ~ 1 + educ + exper + I(exper**2) + [hours ~ age + kidslt6 + nwifeinc]",
    data=mroz,
)
results_iv2 = reg_iv2.fit(cov_type="unadjusted", debiased=True)


# print results:
def results_tbl(iv_reg):
    return pd.DataFrame(
        {
            "b": round(iv_reg.params, 4),
            "se": round(iv_reg.std_errors, 4),
            "t": round(iv_reg.tstats, 4),
            "pval": round(iv_reg.pvalues, 4),
        }
    )


table_iv1 = results_tbl(results_iv1)
print(f"table_iv1: \n{table_iv1}\n")
table_iv2 = results_tbl(results_iv2)
print(f"table_iv2: \n{table_iv2}\n")
# correlation of residuals:
cor_u1u2 = np.corrcoef(results_iv1.resids, results_iv2.resids)[0, 1]
print(f"cor_u1u2: {cor_u1u2}\n")
```

Um resultado interessante que foi apresentado é a matriz de correlação dos resíduos. Os resíduos das duas equações são fortemente correlacionados de forma negativa. O método de estimação de **Mínimos Quadrados em 3 Estágios** (MQ3E) pode ser utilizado para levar em consideração esta correlação e obter um estimador mais eficiente que o MQ2E.

Usar MQ3E com o `linearmodels` é simples. A função [`IV3SLS`](https://bashtage.github.io/linearmodels/system/system/linearmodels.system.model.IV3SLS.html) está implementada.

# Estimando por MQ3E todas as equações conjuntamente


```{python}
from linearmodels.system import IV3SLS

formula = {
    "eq1": "hours ~ 1 + educ + age + kidslt6 + nwifeinc + [np.log(wage) ~ exper+I(exper**2)]",
    "eq2": "np.log(wage) ~ 1 + educ + exper + I(exper**2) + [hours ~ age + kidslt6 + nwifeinc]",
}
reg_3sls = IV3SLS.from_formula(formula, data=mroz)
results_3sls = reg_3sls.fit(cov_type="unadjusted", debiased=True)
results_3sls
```